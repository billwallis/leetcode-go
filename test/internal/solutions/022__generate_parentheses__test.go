package solutions_test

import (
	"fmt"
	"github.com/billwallis/leetcode-go/internal/solutions"
	"reflect"
	"slices"
	"sort"
	"testing"
)

func TestSplitParentheses(t *testing.T) {
	var tests = []struct {
		s    string
		want []string
	}{
		{s: "", want: []string{}},
		{s: "()", want: []string{"()"}},
		{s: "()()", want: []string{"()", "()"}},
		{s: "(())", want: []string{"(())"}},
		{s: "()(())", want: []string{"()", "(())"}},
	}

	for _, test := range tests {
		got := solutions.SplitParentheses(test.s)
		if !reflect.DeepEqual(got, test.want) {
			t.Fatalf("SplitParentheses(%s) == %v, want %v", test.s, got, test.want)
		}
	}
}

func TestGenerateParenthesis(t *testing.T) {
	t.Skip("GenerateParenthesis not fully implemented yet (I can't figure it out).")

	var tests = []struct {
		n    int
		want []string
	}{
		{n: 1, want: []string{"()"}},
		{n: 2, want: []string{"(())", "()()"}},
		{n: 3, want: []string{"((()))", "(()())", "(())()", "()(())", "()()()"}},
		{n: 4, want: []string{"(((())))", "((()()))", "((())())", "((()))()", "(()(()))", "(()()())", "(()())()", "(())(())", "(())()()", "()((()))", "()(()())", "()(())()", "()()(())", "()()()()"}},
		{n: 6, want: []string{}},
	}

	for _, test := range tests {
		got := solutions.GenerateParenthesis(test.n)
		want := test.want
		sort.Strings(got)
		sort.Strings(want)
		for _, char := range want {
			if !slices.Contains(got, char) {
				fmt.Printf("Missing %v\n", char)
			}
		}
		if !reflect.DeepEqual(got, want) {
			t.Fatalf("GenerateParenthesis(%d) == %v, want %v", test.n, got, want)
		}
	}
}
